const API_URL = "http://127.0.0.1:8080/api/v1/auth"; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Login (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ role ‡πÅ‡∏•‡∏∞ URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Redirect)
export const login = async (email: string, password: string) => {
    console.log("üì° [Login] Sending Request to API...");
    
    const response = await fetch(`${API_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
        credentials: "include", // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å! ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Browser ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á Cookies
    });

    const data = await response.json();
    console.log("üì° [Login] API Response:", response.status, data);

    if (!response.ok) {
        console.error("‚ùå [Login Error]:", data.error);
        throw new Error(data.error || "Login failed");
    }

    console.log("‚úÖ [Login] Success! Redirecting to:", data.role);

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Cookies ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const cookies = document.cookie;
    console.log("üç™ [Cookies after login]:", cookies);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ `auth_token` ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Cookies ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (!cookies.includes("auth_token")) {
        console.error("‚ùå [Error]: `auth_token` is missing in cookies.");
        throw new Error("Login successful, but token is missing. Please check backend.");
    }

    return {
        role: data.role,
        redirectUrl: getRedirectUrl(data.role),
    };
};


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout
export const logout = async () => {
    console.log("üì° [Logout] Sending Request to API...");

    await fetch(`${API_URL}/logout`, {
        method: "POST",
        credentials: "include",
    });

    console.log("‚úÖ [Logout] Success!");
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Cookie
export const getUserRole = async (): Promise<string | null> => {
    console.log("üì° [GetUserRole] Fetching Role...");

    const response = await fetch(`${API_URL}/get-role`, {
        method: "GET",
        credentials: "include",
    });

    if (!response.ok) return null;
    const data = await response.json();
    console.log("‚úÖ [GetUserRole] User Role:", data.role);

    return data.role;
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å URL ‡∏ï‡∏≤‡∏° Role
export const getRedirectUrl = (userRole: string) => {
    console.log("üîÑ [Redirect] User Role:", userRole);

    switch (userRole) {
        case "farmer":
            return "/Farmer/Profile";
        case "factory":
            return "/FactoryDashboard";
        case "logistics":
            return "/LogisticsDashboard";
        case "retailer":
            return "/RetailerDashboard";
        default:
            return "/dashboard"; // ‚úÖ Default
    }
};

export const getUserInfo = async (): Promise<{ email: string; password: string } | null> => {
    console.log("üì° [GetUserInfo] Fetching user info...");

    const response = await fetch(`${API_URL}/user-info`, {
        method: "GET",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
        console.error("‚ùå [GetUserInfo] Failed to fetch user info:", response.status);
        return null;
    }

    const data = await response.json();
    console.log("‚úÖ [GetUserInfo] User info:", data);
    return data;
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (email, password) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
export const updateUserInfo = async (email: string, password: string): Promise<boolean> => {
    console.log("üì° [UpdateUserInfo] Updating user info...");

    const response = await fetch(`${API_URL}/update-user`, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
        console.error("‚ùå [UpdateUserInfo] Failed to update user info:", response.status);
        return false;
    }

    console.log("‚úÖ [UpdateUserInfo] User info updated successfully");
    return true;
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const checkEmailAvailability = async (email: string): Promise<boolean> => {
    try {
        const response = await fetch(`${API_URL}/check-email?email=${email}`);
        const data = await response.json();
        return data.available;
    } catch (err) {
        console.error("‚ùå [Check Email] Error:", err);
        return false;
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
export const registerUser = async (username: string, email: string, password: string) => {
    try {
        const response = await fetch(`${API_URL}/register`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, email, password }),
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.error || "Registration failed");

        return data;
    } catch (err) {
        console.error("‚ùå [SignUp] Error:", err);
        throw new Error(err instanceof Error ? err.message : "Registration failed");
    }
};