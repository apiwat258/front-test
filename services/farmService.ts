const API_URL = "http://127.0.0.1:8080/api/v1/farmers";

import {
    uploadCertificate,
    createOrUpdateCertificate,
    checkUserCertification,
} from "./certificateService";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
export const updateFarmInfo = async (farmData: any): Promise<any | null> => {
    try {
        console.log("üì° [UpdateFarmInfo] Updating farm data...");

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Backend
        const payload = {
            companyName: farmData?.companyName, // ‚úÖ ‡πÉ‡∏ä‡πâ companyName ‡πÅ‡∏ó‡∏ô firstName + lastName
            email: farmData?.email,
            address: farmData?.address,
            district: farmData?.district,
            subdistrict: farmData?.subdistrict,
            province: farmData?.province,
            phone: farmData?.telephone,
            areaCode: farmData?.areaCode,
            location_link: farmData?.location,
            cert_file: farmData?.cert_file || "",
            country: farmData?.country || "",  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° country
            postCode: farmData?.postCode || "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° postCode
            lineID: farmData?.lineID || "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° lineID
            facebook: farmData?.facebook || "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° facebook
        };

        console.log("üìå [UpdateFarmInfo] Sending data:", payload);

        const response = await fetch(`${API_URL}/update`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error(`Failed to update farm data: ${response.status}`);
        }

        console.log("‚úÖ [UpdateFarmInfo] Farm data updated successfully");
        return await response.json();
    } catch (error) {
        console.error("‚ùå [ERROR] Updating farm data failed:", error);
        return null;
    }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
export const getFarmInfo = async (): Promise<any | null> => {
    try {
        const response = await fetch(`${API_URL}/me`, {
            method: "GET",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
        });

        if (response.status === 403) {
            console.warn("üö® User is not a farmer (403 Forbidden)");
            return null; // ‚úÖ ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ null ‡πÅ‡∏ó‡∏ô Error
        }

        if (response.status === 404) {
            console.warn("üö® No farm found (404 Not Found)");
            return null; // ‚úÖ ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ null ‡πÅ‡∏ó‡∏ô Error
        }

        if (!response.ok) {
            throw new Error(`Fetching farm data failed: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error("‚ùå [ERROR] Fetching farm data failed:", error);
        return null; // ‚úÖ ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ null ‡πÅ‡∏ó‡∏ô Error
    }
};


// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå
export const submitFarmData = async (
    farmData: any,
    certificateFile: File | null,
    certificateData: any,
    selectedDistrict: string,
    selectedSubDistrict: string,
    selectedProvince: string,
    setFarmData: React.Dispatch<React.SetStateAction<any>>,
    setCertificateData: React.Dispatch<React.SetStateAction<any | null>>,
    setCertificateFile: React.Dispatch<React.SetStateAction<File | null>>,
    setFileNames: React.Dispatch<React.SetStateAction<string[]>>,
    isCreating: boolean // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Create Mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
) => {
    let certCID = certificateData?.cid || "";

    if (certificateFile) {
        try {
            console.log("üìå Uploading certificate file:", certificateFile.name);
            const uploadResult = await uploadCertificate(certificateFile);

            if (uploadResult) {
                certCID = uploadResult;
                console.log("üìå Received CID from IPFS:", certCID);
                setCertificateData({ cid: certCID });
                setCertificateFile(null);
                setFileNames(["No file selected."]);
            } else {
                alert("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                return;
            }
        } catch (error) {
            console.error("‚ùå Error uploading certificate:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå");
            return;
        }
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Create Mode ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `createFarm()`
    if (isCreating) {
        try {
            console.log("üöÄ [Create Mode] Calling `createFarm()`...");
            const newFarm = await createFarm(farmData, certificateFile);
            if (newFarm) {
                console.log("‚úÖ [Create Farm] Success:", newFarm);
                setFarmData(newFarm);
                alert("‚úÖ ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
            } else {
                alert("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
        } catch (error) {
            console.error("‚ùå Error creating farm:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°");
        }
        return;
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Create Mode ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `updateFarmInfo()`
    console.log("üì° [Update Mode] Calling `updateFarmInfo()`...");
    try {
        const result = await updateFarmInfo({
            firstname: farmData?.firstName,
            lastname: farmData?.lastName,
            email: farmData?.email,
            address: farmData?.address,
            district: selectedDistrict,
            subdistrict: selectedSubDistrict,
            province: selectedProvince,
            phone: farmData?.telephone,
            areaCode: farmData?.areaCode,
            location_link: farmData?.location,
            cert_file: certCID,
        });

        if (result) {
            console.log("‚úÖ [Update Farm] Success:", result);
            setFarmData(result);
            alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } else {
            alert("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
    } catch (error) {
        console.error("‚ùå Error updating farm information:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°");
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà
export const createFarm = async (farmData: any, certificateFile: File | null): Promise<any | null> => {
    try {
        let certCID = "";

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå ‚Üí ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡∏Å‡πà‡∏≠‡∏ô
        if (certificateFile) {
            console.log("üìå Uploading certificate file:", certificateFile.name);
            const uploadResult = await uploadCertificate(certificateFile);

            if (uploadResult) {
                certCID = uploadResult;
                console.log("üìå Received CID from IPFS:", certCID);
            } else {
                throw new Error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CID ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Blockchain ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (certCID) {
            console.log("üìå Checking if certification CID exists on Blockchain...");
            const isDuplicate = await checkUserCertification(certCID);
            if (isDuplicate) {
                alert("‚ö†Ô∏è CID ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Blockchain!");
                return null;
            }
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API `/create-farm`
        const payload = {
            farmName: farmData?.farmName || "",
            email: farmData?.email || "",
            address: farmData?.address || "",
            district: farmData?.district || "",
            subdistrict: farmData?.subdistrict || "",
            province: farmData?.province || "",
            phone: farmData?.telephone || "",
            areaCode: farmData?.areaCode || "",
            location_link: farmData?.location || "",
            cert_file: certificateFile || null,
            country: farmData?.country || "",
            postCode: farmData?.postCode || "",
            lineID: farmData?.lineID || "",
            facebook: farmData?.facebook || "",
        };
        
        console.log("üìå Sending farm creation data to Backend:", payload);

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API `/create-farm`
        console.log("üìå [CreateFarm] Final Payload Before Sending:", payload);
        const response = await fetch(`${API_URL}/create`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error(`‚ùå Failed to create farm: ${response.status}`);
        }

        const result = await response.json();
        console.log("‚úÖ Farm created successfully:", result);

        return result;
    } catch (error) {
        console.error("‚ùå [ERROR] Creating farm failed:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°");
        return null;
    }
};
