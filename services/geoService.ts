// üìå geoService.ts

interface GeoData {
    id: number;
    provinceCode: number;
    provinceNameEn: string;
    provinceNameTh: string;
    districtCode: number;
    districtNameEn: string;
    districtNameTh: string;
    subdistrictCode: number;
    subdistrictNameEn: string;
    subdistrictNameTh: string;
    postalCode: number;
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏ï‡∏≥‡∏ö‡∏• ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON (‡πÉ‡∏ä‡πâ Cache)
let cachedGeoData: GeoData[] | null = null;

export const getGeoData = async (): Promise<GeoData[]> => {
    if (cachedGeoData) return cachedGeoData; // ‚úÖ ‡πÉ‡∏ä‡πâ Cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

    try {
        const response = await fetch("/data/geography.json");
        const data: GeoData[] = await response.json();
        cachedGeoData = data; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cache
        return data;
    } catch (error) {
        console.error("‚ùå [ERROR] Fetching geography data failed:", error);
        return [];
    }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
export const getProvinceList = (geoData: GeoData[]): string[] => {
    return [...new Set(geoData.map((item) => item.provinceNameEn))];
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
export const getDistrictList = (geoData: GeoData[], selectedProvince: string): string[] => {
    return [...new Set(
        geoData.filter((item) => item.provinceNameEn === selectedProvince).map((item) => item.districtNameEn)
    )];
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡∏ö‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
export const getSubDistrictList = (geoData: GeoData[], selectedDistrict: string): string[] => {
    return [...new Set(
        geoData.filter((item) => item.districtNameEn === selectedDistrict).map((item) => item.subdistrictNameEn)
    )];
};
