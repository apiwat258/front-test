import axios from "axios";

const API_BASE_URL = "http://127.0.0.1:8080/api/v1/certifications";

// ‚úÖ ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
export const getUserCertifications = async (includeExpired: boolean = false) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/me`, {
            params: { includeExpired }, // ‚úÖ ‡πÉ‡∏ä‡πâ Query Param ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Active ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            withCredentials: true, // ‚úÖ ‡∏™‡πà‡∏á Cookie/JWT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
        });
        return response.data.certifications; // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error: any) {
        console.error("‚ùå Error fetching user certifications:", error.response?.data || error.message);
        throw error;
    }
};


// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ IPFS ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ CID
export const uploadCertificate = async (file: File): Promise<string | null> => {
    try {
        if (!file) throw new Error("No file provided for upload");

        const formData = new FormData();
        formData.append("file", file);

        console.log("üìå DEBUG - Uploading File:", file.name);

        const response = await axios.post(`${API_BASE_URL}/upload`, formData, {
            headers: { "Content-Type": "multipart/form-data" },
        });

        console.log("üìå DEBUG - IPFS Response:", response.data);
        return response.data.cid;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Uploading certificate:", error.response?.data || error.message);
        return null;
    }
};

export const uploadCertificateAndCheck = async (certificateFile: File): Promise<string | null> => {
    try {
        console.log("üìå Uploading certificate file:", certificateFile.name);
        const uploadResult = await uploadCertificate(certificateFile);

        if (!uploadResult) {
            throw new Error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }

        console.log("üìå Received CID from IPFS:", uploadResult);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `certCID` ‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        const certCheckResponse = await fetch(`${API_BASE_URL}/check/${uploadResult}`, {
            method: "GET",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
        });

        if (!certCheckResponse.ok) {
            throw new Error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
        }

        const certCheckData = await certCheckResponse.json();
        console.log("üìå Cert Check Result:", certCheckData);

        if (certCheckData.exists) {
            console.error("üö® ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà");
            alert("‚ùå ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà");
            return null;
        }

        return uploadResult; // ‚úÖ ‡∏™‡πà‡∏á `certCID` ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠
    } catch (error) {
        console.error("‚ùå [ERROR] Upload & Check Certificate Failed:", error);
        alert("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß");
        return null;
    }
};


// ‚úÖ ‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå (Soft Delete)
export const deleteCertificate = async (entityID: string, eventID: string) => {
    try {
        if (!entityID || !eventID) throw new Error("Entity ID and Event ID are required for deleting certificate");

        const response = await axios.delete(`${API_BASE_URL}/${entityID}`, {
            data: { event_id: eventID }, // ‚úÖ ‡∏™‡πà‡∏á eventID ‡∏ú‡πà‡∏≤‡∏ô JSON Body
        });

        console.log("‚úÖ Certification deleted:", response.data);
        return response.data;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Deleting certificate:", error.response?.data || error.message);
        return null;
    }
};

export const handleDeleteCertificate = async (
    entityID: string,
    eventID: string,
    setCertificateData: React.Dispatch<React.SetStateAction<any[]>>
) => {
    const confirmDelete = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ?");
    if (!confirmDelete) return;

    console.log("üìå [DEBUG] Deleting certificate with Event ID:", eventID);

    const result = await deleteCertificate(entityID, eventID);
    if (result) {
        setCertificateData((prevData = []) => {
            console.log("üìå [DEBUG] Current Certificate Data Before Delete:", prevData);
            const updatedData = prevData.filter((cert) => cert.event_id !== eventID);
            console.log("üìå [DEBUG] Updated Certificate Data After Delete:", updatedData);
            return updatedData;
        });
        alert("‚úÖ ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    } else {
        alert("‚ùå ‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
};

