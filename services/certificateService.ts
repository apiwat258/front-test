import axios from "axios";

const API_BASE_URL = "http://127.0.0.1:8080/api/v1/certifications";

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç endpoint ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ entityID)
export const getCertificateInfo = async (entityID: string) => {
    try {
        const response = await fetch(`${API_BASE_URL}/entity/${entityID}`, {
            method: "GET",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch certificate info: ${response.status}`);
        }

        const data = await response.json();
        console.log("üìå [Frontend] Retrieved Certificate Data:", data);

        return Array.isArray(data) && data.length > 0 ? data : [];
    } catch (error) {
        console.error("‚ùå Error fetching certificate:", error);
        return [];
    }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ IPFS ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ CID
export const uploadCertificate = async (file: File): Promise<string | null> => {
    try {
        if (!file) throw new Error("No file provided for upload");

        const formData = new FormData();
        formData.append("file", file);

        console.log("üìå DEBUG - Uploading File:", file.name);

        const response = await axios.post(`${API_BASE_URL}/upload`, formData, {
            headers: { "Content-Type": "multipart/form-data" },
        });

        console.log("üìå DEBUG - IPFS Response:", response.data);
        return response.data.cid;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Uploading certificate:", error.response?.data || error.message);
        return null;
    }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CID ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Blockchain ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const checkUserCertification = async (certCID: string): Promise<boolean> => {
    try {
        const response = await axios.get(`${API_BASE_URL}/check/${certCID}`);
        console.log("üìå Certification Check Response:", response.data);
        return response.data.exists;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Checking certificate CID:", error.response?.data || error.message);
        return false;
    }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ entityID)
const getExistingCertification = async (entityID: string) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/entity/${entityID}`);
        console.log("üìå [Check Certification] Existing Certificate Data:", response.data);
        return response.data.length > 0 ? response.data[0] : null; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    } catch (error: any) {
        console.error("‚ùå [ERROR] Checking existing certification:", error.response?.data || error.message);
        return null;
    }
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
export const createOrUpdateCertificate = async (payload: {
    entityType: string;
    entityID: string;
    certificationCID: string;
    issuedDate: string;
    expiryDate: string;
}) => {
    try {
        if (!payload.entityID || !payload.certificationCID) {
            throw new Error("Missing required fields for certification update");
        }

        console.log("üìå Checking if CID exists before storing...");
        const isDuplicate = await checkUserCertification(payload.certificationCID);
        if (isDuplicate) {
            console.warn("‚ö†Ô∏è Certificate CID already exists on Blockchain");
            return null;
        }

        console.log("üìå Checking if Entity already has a Certification...");
        const existingCert = await getExistingCertification(payload.entityID);

        if (existingCert) {
            console.log("üîÑ Existing Certificate found. Updating instead...");
            const updatePayload = { ...existingCert, certificationCID: payload.certificationCID };
            const updateResponse = await axios.put(`${API_BASE_URL}/update`, updatePayload);
            console.log("‚úÖ Certification updated successfully:", updateResponse.data);
            return updateResponse.data;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        console.log("üìå No existing certificate. Creating a new one...");
        const response = await axios.post(`${API_BASE_URL}/create`, payload);
        console.log("‚úÖ Certification created:", response.data);
        return response.data;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Creating/updating certification:", error.response?.data || error.message);
        return null;
    }
};

// ‚úÖ ‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå (Soft Delete)
export const deleteCertificate = async (entityID: string, eventID: string) => {
    try {
        if (!entityID || !eventID) throw new Error("Entity ID and Event ID are required for deleting certificate");

        const response = await axios.delete(`${API_BASE_URL}/${entityID}`, {
            data: { event_id: eventID }, // ‚úÖ ‡∏™‡πà‡∏á eventID ‡∏ú‡πà‡∏≤‡∏ô JSON Body
        });

        console.log("‚úÖ Certification deleted:", response.data);
        return response.data;
    } catch (error: any) {
        console.error("‚ùå [ERROR] Deleting certificate:", error.response?.data || error.message);
        return null;
    }
};

export const handleDeleteCertificate = async (
    entityID: string,
    eventID: string,
    setCertificateData: React.Dispatch<React.SetStateAction<any[]>>
) => {
    const confirmDelete = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ?");
    if (!confirmDelete) return;

    console.log("üìå [DEBUG] Deleting certificate with Event ID:", eventID);

    const result = await deleteCertificate(entityID, eventID);
    if (result) {
        setCertificateData((prevData = []) => {
            console.log("üìå [DEBUG] Current Certificate Data Before Delete:", prevData);
            const updatedData = prevData.filter((cert) => cert.event_id !== eventID);
            console.log("üìå [DEBUG] Updated Certificate Data After Delete:", updatedData);
            return updatedData;
        });
        alert("‚úÖ ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    } else {
        alert("‚ùå ‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
};

